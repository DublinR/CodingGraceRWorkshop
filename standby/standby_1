\newpage
\chapter{Advanced R code}
\section{Data frame}
A Data frame is
\subsection{Merging Data frames}

\section{Functions}
Syntax to define functions

<pre>
<code>
myfct <- function(arg1, arg2, ...) { function_body }
</code>
</pre>
The value returned by a function is the value of the function body, which is usually an unassigned final expression, e.g.: return()

Syntax to call functions
<pre>
<code>
myfct(arg1=..., arg2=...)
</code>
</pre>


\section{Time and Date}
It is useful . The length of time a program takes is interesting.


<pre>
<code>
date() # returns the current system date and time
</code>
</pre>


\section{The Apply family}

Sometimes want to apply a function to each element of a
vector/data frame/list/array.
\\
Four members: lapply, sapply, tapply, apply
\\
lapply: takes any structure and gives a list of results (hence
the `l')
\\
sapply: like lapply, but tries to simplify the result to a
vector or matrix if possible (hence the `s')
\\
apply: only used for arrays/matrices
\\
tapply: allows you to create tables (hence the `t') of values
from subgroups defined by one or more factors.
\newpage
\chapter{Data Visualization}
\section{Plots}
This section is an introduction for producing simple graphs with
the R Programming Language.
\begin{itemize}
*  Line Charts  *  Bar Charts *  Histograms *  Pie
Charts *  Dotcharts
\end{itemize}

\section{The R Programming Language}

The R Programming Language is a statistical , data analysis , etc

R is a free software environment for statistical computing and graphics.

\section{Writing R scripts}
Editing your R script ``R Editor".
\begin{itemize}
*  On the menu of the R console, click on file.
*  Select open script or new script as appropriate.
*  Navigate to your working directory and select your ``.R} file
*  A new dialogue box ````the R editor}" will open up.
*  Input or select code you wish to compile.
*  To compile this code, highlight it. Click the edit button on the menu.
*  Select either ``Run Line" or ``Run Selection or All".
*  Your code should now compile.
*  To save your code, clink on ``file" and then ````save as}".
*  Save the file with the ````.R}" extension to your working directory.
\end{itemize}

\section{Vector types}
``R} operates on named data structures. The simplest such structure is the
vector, which is a single entity consisting of an ordered collection of
Numbers or characters.

\begin{itemize}
*  Numeric vectors
*  Character vectors
*  Logical vectors
*  (also complex number vectors and colour vectors)
\end{itemize}

To create a vector, use the assignment operator and the concatenate function.
For numeric vectors, the values are simply numbers.

<code>
># week8.r
>NumVec<-c(10.4,5.6,3.1,6.4)
</code>

Alternatively we can use the ``assign()`` command

For character vectors, the values are simply characters, specified with
quotation marks.A logical vectors is a vector whose elements are TRUE, FALSE or NA

<code>
>CharVec<-c(``blue", ``green", ``yellow")
>LogVec<-c(TRUE, FALSE)
</code>

\section{Graphical data entry interface}

``Data.entry()`` is a useful  command for inputting or editing data sets. Any
changes are saved automatically (i.e. dont need to use the assignment
operator). We can also used the ``edit()`` command, which calls the ``R Editor}.

<code>
>data.entry(NumVec)
>NumVec <- edit(NumVec)
</code>

Another method of creating vectors is to use the following
<code>
numeric (length = n)
character (length = n)
logical (length = n)
</code>
These commands create empty vectors, of the appropriate kind, of length $n$. You can then use the graphical data entry interface to populate your data sets.

\subsubsection{Accessing specified elements of a vector}

The $n$th element of vector ``Vec" can be accessed by specifying its index when
calling ``Vec".
<code>>Vec[n]
</code>
A sequence of  elements of vector ``Vec" can be accessed by specifying its index
when calling ``Vec".
<code>>Vec[l:u]
</code>
Omitting and deleting the $n$th element of vector ``Vec"
<code>
>Vec[-n]
>Vec <- Vec[-n]
</code>

\section{Reading data}


\subsection{inputting data}
Concatenation

\subsection{using help}

?mean

\subsection{Adding comments}

\subsection{Packages}
The capabilities of R are extended through user-submitted packages, which allow specialized statistical techniques, graphical devices, as well as and
import/export capabilities to many external data formats.

\section{Managing Precision}
\begin{itemize}
*  ``floor()`` - 
*  ``ceiling()`` - 
*  ``round()`` - 
*  ``as.integer()`` -
\end{itemize}

<pre>
<code>
> pi
[1] 3.141593
> floor(pi)
[1] 3
> ceiling(pi)
[1] 4
> round(pi,3)
[1] 3.142
> as.integer(pi)
[1] 3
</code>
</pre>

\section{Basic Operations}
\subsection{Complex numbers}
\subsection{Trigonometric functions}
\section{Matrices}

%\end{document}
